<!DOCTYPE html>
<html>
<head>
    <title>Chatbot Example</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Senior Project</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="css/index.css">
    <style>
        body {
            background-color: black;
            font-family: Arial, sans-serif;
        }

        .chatbot-container {
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            min-width: 400px;
            margin: 5px
        }

        .chatbot-header {
            background-color: #4267B2;
            color: #fff;
            padding: 15px;
            text-align: center;
        }

        .chatbot-header h1 {
            margin: 0;
        }

        .chatbot-body {
            padding: 15px;
            text-align: left;
            max-height: 700px;
            overflow-y: auto;
        }

        .user-message,
        .chatbot-message {
            border-radius: 5px;
            display: inline-block;
            margin-bottom: 10px;
            padding: 10px;
            width: 70%;
        }

        .user-message {
            background-color: #DCF8C6;
            align-self: flex-start;
        }

        .chatbot-message {
            background-color: #F5F5F5;
            align-self: flex-end;
        }

        .chat-input {
            border: none;
            border-top: 1px solid #ddd;
            padding: 10px;
            width: 100%;
        }

        .send-button {
            background-color: #4267B2;
            border: none;
            color: #fff;
            cursor: pointer;
            padding: 10px;
            width: 100%;
        }
    </style>
</head>
<body>
<section class="section-navbar">
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">Lebanon Starter Kit</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/about-us">About Us</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact-us">Contact Us</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/news">News</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/chatbot">ChatBot</a>
                    </li>
                    <% if (session.user) { %>
                        <li class="nav-item">
                            <a class="nav-link" href="/logout">Logout</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-info" href="#"><%- session.user.name %></a>
                        </li>
                    <% } else { %>
                        <li class="nav-item">
                            <a class="nav-link" href="/login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/register">Register</a>
                        </li>
                    <% } %>
                </ul>
            </div>
        </div>
    </nav>
</section>
<section class="container">
    <div class="chatbot-container">
        <div class="chatbot-header">
            <h1>Lirabot</h1>
        </div>
        <div class="chatbot-body" id="chatbot-body">
            <div class="chatbot-message">
                <p>Welcome to the Lirabot! How can I assist you today?</p>
            </div>
        </div>
        <input type="text" class="chat-input" id="userInput" placeholder="Type your message...">
        <button class="send-button" id="sendButton" onclick="handleUserInput()">Send</button>
    </div>
</section>

<script>
    var exchangeRateData = <%= JSON.stringify(liraData['liraBuy']) %>;

    // Add event listener for the send button
    document.getElementById("sendButton").addEventListener("click", function () {
        handleUserInput(exchangeRateData);
    });

    // Add event listener for the Enter key press
    document.getElementById("userInput").addEventListener("keyup", function (event) {
        if (event.key === "Enter") {
            handleUserInput(exchangeRateData);
        }
    });


    // Function to handle user input
    function handleUserInput(exchangeRateData) {
        // Get user input
        var userInput = document.getElementById("userInput").value;

        // Process the user input
        if (userInput) {
            // Convert user input to lowercase for easier comparison
            userInput = userInput.toLowerCase();

            // Check if user input contains specific keywords and respond accordingly
            if (userInput.includes("exchange rate") && (userInput.includes("usd") || userInput.includes("dollar"))) {
                // Respond with the current exchange rate for USD to LBP
                var currentRate = exchangeRateData[exchangeRateData.length - 1][1];
                addUserMessage(userInput);
                addChatbotMessage("The current exchange rate for USD to LBP is " + currentRate + ".");
            } else if (userInput.includes("trend")) {
                // Check the trend of the exchange rate (upwards, downwards, or stable)
                var trend = getExchangeRateTrend(exchangeRateData);
                addUserMessage(userInput);
                addChatbotMessage("The exchange rate for USD to LBP is " + trend + ".");
            } else if (userInput.includes("compare") && userInput.includes("yesterday")) {
                // Compare the current exchange rate to yesterday's rate
                var currentRate = exchangeRateData[exchangeRateData.length - 1][1];
                var yesterdayRate = exchangeRateData[exchangeRateData.length - 2][1];
                var comparison = compareExchangeRates(currentRate, yesterdayRate);
                addUserMessage(userInput);
                addChatbotMessage(comparison);
            } else if (userInput.includes("historical exchange rates")) {
                // Provide historical exchange rates
                var historicalRates = getHistoricalExchangeRates(exchangeRateData);
                addUserMessage(userInput);
                addChatbotMessage("Here are some historical exchange rates for USD to LBP: " + historicalRates.join(", "));
            } else {
                addUserMessage(userInput);
                // Respond with a default message if user input doesn't match any specific query
                addChatbotMessage("I'm sorry, but I couldn't understand your question. How can I assist you further?");
            }

            // Clear the input field
            document.getElementById("userInput").value = "";
        }
    }

    // Function to add a message from the chatbot to the chatbot body
    function addChatbotMessage(message) {
        var chatbotBody = document.getElementById("chatbot-body");
        var chatbotMessage = document.createElement("div");
        chatbotMessage.classList.add("chatbot-message");
        chatbotMessage.innerHTML = "<p>" + message + "</p>";
        chatbotBody.appendChild(chatbotMessage);
    }

    // Function to add a message from the chatbot to the chatbot body
    function addUserMessage(message) {
        var chatbotBody = document.getElementById("chatbot-body");
        var chatbotMessage = document.createElement("div");
        chatbotMessage.classList.add("user-message");
        chatbotMessage.innerHTML = "<p>" + message + "</p>";
        chatbotBody.appendChild(chatbotMessage);
    }

    // Function to get the trend of the exchange rate
    function getExchangeRateTrend(exchangeRateData) {
        var currentRate = exchangeRateData[exchangeRateData.length - 1][1];
        var previousRate = exchangeRateData[exchangeRateData.length - 2][1];

        if (currentRate > previousRate) {
            return "trending upwards";
        } else if (currentRate < previousRate) {
            return "trending downwards";
        } else {
            return "stable";
        }
    }

    // Function to compare the current exchange rate to yesterday's rate
    function compareExchangeRates(currentRate, yesterdayRate) {
        if (currentRate > yesterdayRate) {
            return "The current exchange rate is higher than yesterday's rate.";
        } else if (currentRate < yesterdayRate) {
            return "The current exchange rate is lower than yesterday's rate.";
        } else {
            return "The current exchange rate is the same as yesterday's rate.";
        }
    }

    // Function to get historical exchange rates
    function getHistoricalExchangeRates(exchangeRateData) {
        var historicalRates = exchangeRateData.map(rate => rate[1]);
        return historicalRates;
    }


</script>


</body>

</html>

  